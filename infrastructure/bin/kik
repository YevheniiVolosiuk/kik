#!/usr/bin/env bash

# kik - Deployment and Environment Management Tool
# Version: 1.0.0
# Copyright (c) 2024 Your Company Name
# Licensed under MIT License

# Error handling
set -euo pipefail
IFS=$'\n\t'

# Constants
VERSION="v0.1.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
KIK_ROOT="$(dirname "$SCRIPT_DIR")"

readonly VERSION
readonly SCRIPT_DIR
readonly KIK_ROOT

# Color definitions
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly RESET_COLOR='\033[0m' # No Color

# Source utility functions
# shellcheck source=/dev/null
source "$KIK_ROOT/lib/utils/gum.sh"
# shellcheck source=/dev/null
source "$KIK_ROOT/lib/utils/colors.sh"
# shellcheck source=/dev/null
#source "$KIK_ROOT/lib/utils/exemple.sh"

# Logging function
log() {
    local level="$1"
    shift
    printf "%s [%s] %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$level" "$*" >&2
}

# Error handling function
error_exit() {
    log "ERROR" "$1"
    exit 1
}


# Usage information
print_help_info() {
    cat << EOF
Usage: kik <command> [options]

Commands:
  init        Initialize a new project
  env         Manage environments
  deploy      Deploy the project
  rollback    Rollback to a previous version
  db          Database management
  cache       Cache management
  monitor     Monitoring and logging
  update      Update KIK tool

Global Options:
  -h, --help     Show this help message
  -v, --version  Show version information
  -p, --palette  Show using color palette
  -d, --debag    Debag KIK tool

Run 'kik <command> --help' for more information on a specific command.
EOF
}



# Version information
print_version() {
    printf "KIK Version \n %s \n" "$VERSION"
}

cmd_debag() {
    source "$KIK_ROOT/lib/commands/debag.sh"
    debag_action "$@"
}

# Main function
main() {
    if [[ $# -eq 0 ]]; then
        usage
        exit 1
    fi

    local command_name="$1"
    shift

    case "$command_name" in
        init|env|deploy|rollback|db|cache|monitor|update)
            "cmd_$command_name" "$@"
            ;;
        -d|--debag)
            cmd_debag "$@"
            ;;
        -h|--help)
            print_help_info
            ;;
        -v|--version)
            print_version
            ;;
        -p|--palette)
            print_color_palette
            ;;
        *)
            error_exit "Unknown command: $command"
            ;;
    esac
}

# Trap for cleanup
cleanup() {
    local exit_status=$?
    
    # Remove temporary files if they exist
    # Remove lock file explicitly if script exits normally
    # Kill background processes, if any
    # Add any cleanup tasks here
    #log "INFO" "Cleaning up..."


    # Log exit status
    #if [[ $exit_status -eq 0 ]]; then
    #    log "INFO" "Script exited successfully."
    #else
    #    log "ERROR" "Script exited with status $exit_status."
    #fi

    exit "$exit_status"
}

trap cleanup EXIT SIGINT SIGTERM ERR

# Execute main function
main "$@"

